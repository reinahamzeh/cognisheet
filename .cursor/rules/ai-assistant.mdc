---
description: 
globs: 
alwaysApply: true
---
# Combined AI Chatbot + Assistant Document for Cognisheet

## AI Assistant Behavior and UI Rules

### Navigation Bar Integration
- Move the **Pro Features** button from the AI assistant chat window into the **main navigation bar**.
- Remove all traces of the Pro button from the chat view itself.

### Data Intelligence Capabilities
- AI assistant must be able to:
  - **Analyze all spreadsheet cell data** in real-time.
  - **Calculate or summarize** data contextually based on user prompts.
  - Handle formulas, totals, outliers, and trends without additional input.

### Web Intelligence and Enrichment
- Enable **web search integration**. If the user requests something like:
  - “Find Airbnbs in Germany with prices and locations”
  - “Get company profiles for all companies listed in column A”
  The assistant should:
  - Query the web in real time.
  - Generate a **structured response directly into the spreadsheet cells**.

### Cmd+K Feature (Multi-Select Insight Trigger)
- Support **multi-cell selection**, especially with `Cmd+K` on macOS (or `Ctrl+K` on Windows).
- When triggered:
  - Auto-reference selected cells in the chat box.
  - Allow the user to ask questions **about just those cells**.
  - Example: “Analyze trends across these cells” or “Which product had highest growth?”

### Data Enrichment
- If the user has raw data (e.g., company names, product SKUs), allow AI to **fetch supplemental data from the web**:
  - Company revenue
  - Product specs
  - News coverage
  - Competitor analysis
- Results should be written directly into related cells or a new sheet.

### Chat UI Behavior
- Before any message is sent, display these **suggested prompt buttons**:
  - Analyze Data
  - Generate a Chart
  - Add Formulas
  - Web Search

- Display a **Pro Tip** UI note:  
  *“Tip: Select multiple cells and press Cmd+K to instantly reference them in chat.”*

- When a response is in progress, allow the user to **stop AI generation** at any point.

- Messages the user sends should be **editable inline** after sending.

### Chat History
- Store previous chats in a list with:
  - Auto titles (default), user-editable via **right-click → Rename**
  - **Right-click → Delete** functionality
  - Click to **restore previous chat**, loading its history and thread.

- Inside an open chat, allow the user to **rename the chat session** by clicking the current title.

### Assistant UI and Spreadsheet Interaction Restrictions
- The AI assistant must not block, override, or interfere with spreadsheet UI interaction.
- The assistant can observe and analyze spreadsheet state and data, but must not prevent:
  - Cell selection
  - Direct cell editing
  - File uploads
  - Input focus
  - Scrolling
- The assistant should not inject styles, overlays, or DOM elements that interfere with user input.

### Pro Feature Access (Temporarily Disabled)
- All features (including file upload, web search, charts, enrichment, and multi-cell commands) must be **fully available to all users**, regardless of subscription status.
- Remove or disable any conditional logic related to `user.isPro`, flags, or plan checks during development/testing.

---

## AI Chatbot Development Document for Cognisheet

### Introduction and Overview

The AI chatbot for Cognisheet is designed to make spreadsheet analysis intuitive and powerful for non-technical users. By understanding user requests conversationally, the chatbot unlocks advanced capabilities without requiring formula expertise or manual data handling. The chatbot will:

- Analyze spreadsheet data and generate visualizations powered by Python.
- Create formulas based on user needs.
- Produce charts and import them directly into the spreadsheet.
- Research and scrape the web to pull external data into the spreadsheet.
- Extract text and structured information from PDFs and images.

---

## Functional Requirements

The AI chatbot must support the following features:

1. **Data Analysis and Visualization**  
   - Read and analyze data in the current spreadsheet.  
   - Generate Python-powered visualizations (e.g., graphs, plots) based on user requests.  
   - Display visualizations directly within the spreadsheet interface.  

2. **Formula Generation**  
   - Understand user requests for calculations and generate appropriate spreadsheet formulas.  
   - Insert the generated formulas into the spreadsheet for immediate use.  

3. **Chart Generation**  
   - Create charts (e.g., bar, line, pie) from spreadsheet data based on user commands.  
   - Import the charts directly into the spreadsheet view.  

4. **Web Research and Scraping**  
   - Perform web searches and scrape data based on user queries (e.g., "Find Airbnbs near Disneyland California").  
   - Use tools like `@firecrawl_dev` and `@ExaAILabs` for efficient and structured data retrieval.  
   - Insert the scraped data into the spreadsheet in an organized format.  

5. **Document Data Extraction**  
   - Extract text and structured data (e.g., tables) from PDFs and images.  
   - Import the extracted information into the spreadsheet for further use.  

---

## Development Approach

Each feature requires a specific approach to ensure it is user-friendly, efficient, and integrated smoothly with the spreadsheet.

### 1. Data Analysis and Visualization
- Use a system to interpret user requests (e.g., "Show sales trends") and analyze the spreadsheet data.  
- Enable Python-based tools to create visualizations like graphs or plots.  
- Design a way to show these visualizations inside the spreadsheet, such as in a panel or pop-up.

### 2. Formula Generation
- Build the chatbot to recognize what calculations users want and turn them into spreadsheet formulas.  
- Ensure the formulas are added to the right cells and work correctly, even with tricky data like empty cells.

### 3. Chart Generation
- Use the spreadsheet’s built-in charting tools or add simple charting options.  
- Let the chatbot figure out what kind of chart and data to use from user requests (e.g., "Make a pie chart of expenses").  
- Automate adding the charts to the spreadsheet.

### 4. Web Research and Scraping
- Connect the chatbot to web tools like `@firecrawl_dev` and `@ExaAILabs` to search and grab data.  
- Turn user questions into search tasks and organize the results (e.g., Airbnb listings into rows and columns).  
- Place the data neatly into the spreadsheet.

### 5. Document Data Extraction
- Add tools to read text and tables from PDFs and images quickly.  
- Match the extracted data to spreadsheet cells or sections.  
- Ask users for clarification if needed (e.g., "Which table do you want?").

---

## Integration with Spreadsheet App

The AI chatbot will live inside the spreadsheet interface, likely as a sidebar or chat window, so users can access it without leaving their work.

- **Connection**: Link the chatbot to the spreadsheet so it can read and change data as needed.  
- **Instant Updates**: Make sure visualizations, charts, and data appear right away after a request.  
- **Access**: Give the chatbot permission to work with the spreadsheet’s current data and layout.

---

## Roadmap for Implementation

Assuming the base spreadsheet app is ready, here’s how to build and add the AI chatbot:

1. Implement Data Analysis and Visualization  
2. Add Formula Generation  
3. Integrate Chart Generation  
4. Enable Web Research and Scraping  
5. Implement Document Data Extraction  
6. Test each feature individually and as part of the full app  
7. Iterate based on feedback

---

## Testing and Validation

- **Feature Testing**: Check each part (like formulas or data extraction) works correctly.  
- **App Testing**: Ensure the chatbot fits into the spreadsheet without problems.  
- **User Testing**: Let users try it and confirm it meets their needs.  
- **Speed Testing**: Make sure it runs smoothly, even with big data or complex tasks.

---

## Conclusion

This document lays out a complete development and behavior plan for the Cognisheet AI chatbot. It ensures all assistant capabilities, spreadsheet features, and user interactions work together fluidly, with no feature gating or input-blocking during testing.