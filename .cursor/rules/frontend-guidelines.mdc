---
description: 
globs: 
alwaysApply: true
---
## Introduction

Cognisheet is a simple, intuitive spreadsheet tool with a chat interface for natural language queries. The frontend prioritizes usability, consistency, and accessibility, delivering a clean and responsive experience. These guidelines ensure the interface remains straightforward and supports AI-driven interactions effectively.

---

## Design System

### Principles

- **Simplicity**: Keep the UI minimal, focusing on core functionality.
- **Consistency**: Apply uniform styles across all elements.
- **AI Usability**: Design for seamless interaction with AI features.

### Colors

- **Primary**: `#4A90E2` (calm blue for trust)
- **Background**: `#F5F5F5` (light gray for neutrality)
- **Accent**: `#50E3C2` (teal for actions)
- **Text**: `#333333` (dark gray for readability)
- **Error**: `#D0021B` (red for alerts)

### Typography

- **Font**: `Roboto, sans-serif` (clean and modern)
- **Sizes**:
    - Headings: `24px` (H1), `18px` (H2)
    - Body: `16px`
    - Small: `14px`
- **Line Height**: `1.5` for clarity

### Spacing

- **Base Unit**: `16px` for padding, margins, and gaps.
- **Consistency**: Use multiples of `16px` for layout harmony.

---

## Component Library

### Component Architecture

- **Atomic Design**:
    - **Atoms**: Basic building blocks (e.g., buttons, inputs).
    - **Molecules**: Small groups (e.g., input with label).
    - **Organisms**: Larger units (e.g., spreadsheet grid, chat panel).
    - **Templates**: Page layouts.

### Component Hierarchy

- **App**
    - **Header**: Logo and title.
    - **Main**:
        - **Spreadsheet View**: Grid and toolbar.
        - **Chat Panel**: Query input and message list.
    - **Footer**: Optional links or info.

### Key Components

- **Spreadsheet Grid**: Table for data display and selection.
- **Chat Panel**: Side panel for AI chat.
- **Upload Button**: File upload with drag-and-drop.
- **Chart Container**: Displays AI-generated charts.

---

## State Management

### Approach

- **React Context API**: Manage global state (e.g., spreadsheet data, chat history).
- **Local State**: Handle UI-specific states (e.g., selected cell).

### State Structure

- **Spreadsheet Data**: Parsed data in global context.
- **Chat History**: List of user queries and AI replies.
- **Selection**: Tracks highlighted cells or ranges.

### Guidelines

- Keep global state minimal.
- Use immutable updates for simplicity.
- Avoid overcomplicating state logic.

---

## Routing Structure

### Approach

- **Single-Page Application (SPA)**: No complex routing for the MVP.
- **State-Based Views**: Toggle between views (e.g., onboarding, main app).

### Structure

- **Views**:
    - `/`: Main app (spreadsheet + chat).
    - `/onboarding`: Simple tutorial for new users.
- **Navigation**: Use state flags (e.g., `isOnboarding`) for now; add React Router later if needed.

---

## Styling Methodology

### Approach

- **CSS-in-JS**: Use `styled-components` for scoped, themed styles.
- **Theme**: Centralize colors, fonts, and spacing.

### Guidelines

- Use theme variables for consistency.
- Ensure responsiveness with flexbox or grid.
- Avoid inline styles for better performance.

### Example

```jsx
const theme = {
  colors: {
    primary: '#4A90E2',
    background: '#F5F5F5',
  },
  spacing: {
    base: '16px',
  },
};

const ChatPanel = styled.div`
  background: ${({ theme }) => theme.colors.background};
  padding: ${({ theme }) => theme.spacing.base};
`;

```

---

## Performance Guidelines

### Rules

- **Lazy Loading**: Load charts or large components on demand.
- **Virtualization**: Render only visible spreadsheet rows.
- **Memoization**: Use `React.memo` for costly renders.
- **Code Splitting**: Reduce bundle size with dynamic imports.

### Tools

- **Lighthouse**: Check performance and optimization.
- **React DevTools**: Identify rendering issues.

---

## Accessibility Standards

### Requirements

- **Keyboard Access**: All controls must work via keyboard.
- **ARIA**: Add labels (e.g., `aria-label`) for screen readers.
- **Contrast**: Ensure 4.5:1 ratio for text visibility.
- **Focus**: Manage focus order clearly.

### Tools

- **axe DevTools**: Run accessibility checks.
- **Screen Readers**: Test with NVDA or VoiceOver.

---

## Conclusion

These guidelines ensure Cognisheetâ€™s frontend is simple, consistent, and optimized for AI usability. By adhering to these standards, the interface will remain intuitive and accessible, supporting seamless data interaction for all users.